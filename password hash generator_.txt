import hashlib
import os
import random
import string


def generate_password(length=16, include_uppercase=True, include_digits=True, include_special=True):
    """
    Generates a random password of a specified length with a mix of lowercase, uppercase, digits, and special characters.

    :param length: The length of the password to generate. Default is 16.
    :param include_uppercase: Whether or not to include uppercase letters in the password. Default is True.
    :param include_digits: Whether or not to include digits in the password. Default is True.
    :param include_special: Whether or not to include special characters in the password. Default is True.
    :return: A random password.
    """
    # Define character sets
    lowercase_letters = string.ascii_lowercase
    uppercase_letters = string.ascii_uppercase
    digits = string.digits
    special_characters = string.punctuation

    # Select character sets to include in password
    character_sets = [lowercase_letters]
    if include_uppercase:
        character_sets.append(uppercase_letters)
    if include_digits:
        character_sets.append(digits)
    if include_special:
        character_sets.append(special_characters)

    # Generate password
    password = ''
    for i in range(length):
        character_set = random.choice(character_sets)
        password += random.choice(character_set)

    return password


def generate_hash(password, salt=None, hash_type='sha256'):
    """
    Generates a hash of a password using a specified hash function and salt.

    :param password: The password to hash.
    :param salt: The salt to use for hashing. If not specified, a random salt will be generated.
    :param hash_type: The hash function to use. Default is 'sha256'.
    :return: The hashed password.
    """
    if salt is None:
        salt = os.urandom(16)

    if hash_type == 'sha256':
        hasher = hashlib.sha256()
    elif hash_type == 'sha512':
        hasher = hashlib.sha512()
    else:
        raise ValueError('Unsupported hash function')

    hasher.update(salt)
    hasher.update(password.encode('utf-8'))
    hashed_password = hasher.hexdigest()

    return hashed_password


# Example usage:
password = generate_password(length=20)
hashed_password = generate_hash(password, hash_type='sha512')
print(f'Password: {password}')
print(f'Hashed Password: {hashed_password}')
