import argparse
import hashlib
import secrets

def generate_password(length=12, use_symbols=False):
    """Generate a random password with the specified length and optionally using symbols."""
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    if use_symbols:
        alphabet += "!@#$%^&*()-_=+[{]}\|;:'\",<.>/?"
    password = "".join(secrets.choice(alphabet) for _ in range(length))
    return password

def hash_password(password, algorithm="sha256"):
    """Hash a password using the specified algorithm."""
    hasher = hashlib.new(algorithm)
    hasher.update(password.encode("utf-8"))
    return hasher.hexdigest()

def check_password(password, hashed_password):
    """Check if a password matches its hashed counterpart."""
    return hash_password(password) == hashed_password

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate and hash passwords.")
    parser.add_argument("-l", "--length", type=int, default=12, help="length of password (default: 12)")
    parser.add_argument("-s", "--symbols", action="store_true", help="include symbols in password")
    parser.add_argument("-a", "--algorithm", default="sha256", choices=hashlib.algorithms_guaranteed, help="hashing algorithm to use (default: sha256)")
    parser.add_argument("password", nargs="?", help="password to hash")
    parser.add_argument("hashed_password", nargs="?", help="hashed password to check")

    args = parser.parse_args()

    if args.password:
        password = args.password
        hashed_password = hash_password(password, args.algorithm)
        print(f"Password: {password}")
        print(f"Hashed password ({args.algorithm}): {hashed_password}")
    elif args.hashed_password:
        password = input("Enter password to check: ")
        hashed_password = args.hashed_password
        if check_password(password, hashed_password):
            print("Passwords match.")
        else:
            print("Passwords do not match.")
    else:
        password = generate_password(args.length, args.symbols)
        hashed_password = hash_password(password, args.algorithm)
        print(f"Generated password: {password}")
        print(f"Hashed password ({args.algorithm}): {hashed_password}")
